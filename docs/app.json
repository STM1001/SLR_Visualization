[{"name":"app.R","content":"library(shiny)\r\nlibrary(shinydashboard)\r\nlibrary(shinyjs)\r\nlibrary(ggplot2)\r\nlibrary(bslib)\r\nlibrary(bsicons)\r\nlibrary(waiter)\r\nlibrary(plotly)\r\nlibrary(readxl)\r\nlibrary(reactable)\r\n\r\n\r\n# Shiny app\r\nui <- fluidPage(\r\n\r\n  useGarcon(),\r\n  useWaiter(),\r\n  useSteward(colors = c(\"#b51c16\", \"#e2231b\"), speed = 10),  \r\n  \r\n  waiterShowOnLoad(\r\n    tags$img(\r\n      src=\"https://www.latrobe.edu.au/__data/assets/file/0010/796393/logo-white.svg\", \r\n      height=200, \r\n      id = \"LTULogo\" # set id\r\n    )\r\n  ),\r\n  \r\n  # Load shinydashboard CSS\r\n  tags$head(\r\n    tags$link(rel = \"stylesheet\", type = \"text/css\", href = \"https://cdn.jsdelivr.net/npm/admin-lte@2.4.18/dist/css/AdminLTE.min.css\")\r\n  ),\r\n  \r\n  titlePanel(\"Simple Linear Regression Visualiser\"),\r\n  helpText(\"Add at least two points on the plot and click 'Fit Regression Line'\"),\r\n  \r\n    fluidRow(\r\n      box(\r\n        title = \"Scatter Plot (Click to Add Points)\", status = \"primary\", solidHeader = TRUE,\r\n        plotOutput(\"scatterPlot\", click = \"plot_click\", height = \"400px\"),\r\n        width = 4\r\n      ),\r\n      box(\r\n        title = \"Data Table\", status = \"info\", solidHeader = TRUE,\r\n        tableOutput(\"pointTable\"),\r\n        width = 4\r\n      ),\r\n      box(\r\n        title = \"Model Summary\", status = \"success\", solidHeader = TRUE,\r\n        uiOutput(\"modelSummary\"),  \r\n        width = 4\r\n      )\r\n    ),\r\n    fluidRow(\r\n      box(\r\n        actionButton(\"fit_line\", \"Fit Regression Line\", class = \"btn btn-primary\"),\r\n        actionButton(\"reset\", \"Reset All\", class = \"btn btn-danger\"),\r\n        width = 12,\r\n        style = \"text-align:center\"\r\n      )\r\n    )\r\n  )\r\n\r\nserver <- function(input, output, session) {\r\n\r\n  # Load screen\r\n  \r\n  Garcon$new(\"LTULogo\",  opacity = 0, filter = \"blur\")\r\n  Sys.sleep(0.75)\r\n  waiter_show(html = spin_fading_circles()) \r\n  \r\n  Sys.sleep(0.25)\r\n  waiter_hide()\r\n  \r\n  values <- reactiveValues(\r\n    data = data.frame(x = numeric(0), y = numeric(0)),\r\n    show_model = FALSE\r\n  )\r\n\r\n  observeEvent(input$plot_click, {\r\n    if (nrow(values$data) < 20) {\r\n      new_point <- data.frame(x = input$plot_click$x, y = input$plot_click$y)\r\n      values$data <- rbind(values$data, new_point)\r\n    } else {\r\n      showNotification(\"Maximum of 20 points reached.\", type = \"warning\")\r\n    }\r\n  })\r\n  \r\n  observeEvent(input$reset, {\r\n    values$data <- data.frame(x = numeric(0), y = numeric(0))\r\n    values$show_model <- FALSE\r\n  })\r\n  \r\n\r\n  observeEvent(input$fit_line, {\r\n    if (nrow(values$data) >= 2) {\r\n      values$show_model <- TRUE\r\n      values$model <- lm(y ~ x, data = values$data)  # Save the fitted model\r\n    } else {\r\n      showNotification(\"Please add at least 2 points.\", type = \"error\")\r\n    }\r\n  })\r\n  \r\n  output$scatterPlot <- renderPlot({\r\n    df <- values$data\r\n    p <- ggplot(df, aes(x, y)) +\r\n      geom_point(size = 3) +\r\n      xlim(0, 10) + ylim(0, 10) +\r\n      labs(x = \"x\", y = \"y\") +\r\n      theme_minimal() +\r\n      theme(\r\n        axis.title = element_text(size = 16),  # Axis labels (x, y)\r\n        axis.text = element_text(size = 14)    # Axis tick values\r\n      )\r\n    \r\n    if (values$show_model && nrow(df) >= 2) {\r\n      model <- lm(y ~ x, data = df)\r\n      df$predicted <- predict(model)\r\n      p <- p +\r\n        geom_smooth(method = \"lm\", se = FALSE, color = \"blue\") +\r\n        geom_segment(aes(x = x, xend = x, y = predicted, yend = y),\r\n                     data = df, color = \"red\")\r\n    }\r\n    \r\n    p\r\n  })\r\n  \r\n  output$pointTable <- renderTable({\r\n    df <- values$data\r\n    n <- nrow(df)\r\n    \r\n    if (n <= 10) {\r\n      # Round all values to 2 decimals\r\n      df <- round(df, digits = 2)\r\n      return(df)\r\n    } else {\r\n      first_10 <- round(df[1:10, ], 2)\r\n      \r\n      remaining <- df[11:n, ]\r\n      \r\n      # Round and convert to character for display\r\n      remaining <- data.frame(\r\n        x_extra = format(round(remaining$x, 2), nsmall = 2),\r\n        y_extra = format(round(remaining$y, 2), nsmall = 2),\r\n        stringsAsFactors = FALSE\r\n      )\r\n      \r\n      # Pad with empty strings if fewer than 10 extra points\r\n      if (nrow(remaining) < 10) {\r\n        pad_rows <- 10 - nrow(remaining)\r\n        pad <- data.frame(\r\n          x_extra = rep(\"\", pad_rows),\r\n          y_extra = rep(\"\", pad_rows),\r\n          stringsAsFactors = FALSE\r\n        )\r\n        remaining <- rbind(remaining, pad)\r\n      }\r\n      \r\n      # Combine side-by-side\r\n      combined <- cbind(first_10, remaining)\r\n      return(combined)\r\n    }\r\n  })\r\n  \r\n  output$modelSummary <- renderUI({\r\n    req(values$model)\r\n    eq <- sprintf(\"y = %.2f + %.2fx\", coef(values$model)[1], coef(values$model)[2])\r\n    r2 <- summary(values$model)$r.squared\r\n    ssr <- sum(residuals(values$model)^2)\r\n    \r\n    HTML(paste0(\r\n      \"<div style='font-size: 18px;'>\",\r\n      \"<b>Regression Equation:<\/b><br>\", eq, \"<br><br>\",\r\n      \"<b>R-squared:<\/b> \", round(r2, 3), \"<br>\",\r\n      \"<b>Sum of Squared Residuals (SSR):<\/b> \", round(ssr, 2),\r\n      \"<\/div>\"\r\n    ))\r\n  })\r\n}\r\nshinyApp(ui, server)\r\n","type":"text"}]
